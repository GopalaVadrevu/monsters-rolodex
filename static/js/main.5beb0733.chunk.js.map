{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","name","src","id","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAACC,GAEd,OACI,sBAAKC,UAAU,iBAAf,UACK,qBAAKC,IAAKF,EAAMG,QAAQC,KAAMC,IAAG,+BAA4BL,EAAMG,QAAQG,GAA1C,4BACjC,6BAAKN,EAAMG,QAAQC,OACnB,4BAAIJ,EAAMG,QAAQI,YCLrBC,G,MAAW,SAACR,GACrB,OAEI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAwBA,QAASA,GAAtBA,EAAQG,WCPtBK,G,MAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAYC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC0CjEG,G,wDAvCb,aAAc,IAAD,8BACX,gBAeFH,aAAa,SAACI,GAEV,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAQ1C,WAAU,IAAD,EACyBC,KAAKN,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAmBpB,EAASqB,QAC9B,SAAA3B,GAAO,OACPA,EAAQC,KAAK2B,cAAcC,SAASb,EAAYY,kBAEpD,OAEE,sBAAK9B,UAAU,MAAf,UACM,kDACA,cAAC,EAAD,CAAWW,YAAY,qBAAqBC,aAAce,KAAKf,eAC/D,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCdI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5beb0733.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'; \n\nexport const Card = (props) => {\n\n       return (\n           <div className='card-container'>\n                <img alt={props.monster.name} src = {`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} />\n                <h2>{props.monster.name}</h2>\n                <p>{props.monster.email}</p>            \n            </div> \n           \n           )\n\n}","import React from 'react';\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css';\n\n\nexport const CardList = (props) =>{ \n    return (  \n        \n        <div className='card-list'>\n            {props.monsters.map(monster => (\n                <Card key={monster.id}  monster={monster} />\n                                    )\n                                    )\n                                \n            }\n      \n        </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({  placeholder,handleChange }) => (\n    <input className=\"search\" type='search' placeholder={placeholder} onChange={handleChange}/>\n)","import React, { Component } from \"react\";\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters :[],\n      searchField: ''\n    }\n    //this.handleChange = this.handleChange.bind(this); not needed if we use Arrow functions\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange=(e)=>{\n      //e.preventDefault();\n      this.setState({searchField:e.target.value})\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(\n        monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      \n      <div className=\"App\">\n            <h1>Monsters Rolodex</h1>\n            <SearchBox placeholder='Search monsters...' handleChange={this.handleChange} />\n            <CardList monsters={filteredMonsters} />\n              \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}